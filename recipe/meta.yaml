{% set name = "qpd" %}
{% set version = "0.4.1" %}


package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/qpd-{{ version }}.tar.gz
  sha256: 2bf3fb0a4cf2307b7f3df06ac6d7a4396da7867350d17f3c37cb415fbb8089f7

build:
  # s390x is missing triad  
  skip: true  # [py<37 or s390x]
  number: 0
  script: {{ PYTHON }} -m pip install . --no-deps --no-build-isolation --ignore-installed -vvv

requirements:
  host:
    - pip
    - python
    - setuptools
    - wheel
  run:
    - adagio
    - antlr4-python3-runtime >=4.11.1,<4.12
    - pandas >=1.2.0
    - python
    - triad >=0.8.0
  run_constrained:
    - modin-ray >=0.8.1.1

test:
  #source_files: 
  # - tests 
  imports:
    - qpd
    - qpd_dask
    - qpd_pandas
    # modin-ray: no support for python 3.11 and missing on other archs than linux-64 and win-64  
    - qpd_ray  # [py<311 and (linux64 or win)]
    - qpd_test
    - qpd_version
  commands:
    - pip check
    # Comment out test suite until ray issue is resolved
    #- pytest -vvv --capture=tee-sys tests
  requires:
    - pip
    - dask
    # modin-ray: no support for python 3.11 and missing on other archs than linux-64 and win-64
    - modin-ray >=0.8.1.1  # [py<311 and (linux64 or win)]
    # Would be needed to run tests:
    #- pandasql 
    #- pytest

about:
  home: https://pypi.org/project/qpd/
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE
  summary: Query Pandas Using SQL
  description: |
    QPD let you run the same SQL (SELECT for now) statements on different computing 
    frameworks with pandas-like interfaces. Currently, it support Pandas, Dask and 
    Ray (via Modin on Ray). QPD directly translates SQL into pandas-like operations 
    to run on the backend computing frameworks, so it can be significantly faster 
    than some other approaches, for example, to dump pandas dataframes into SQLite, 
    run SQL and convert the result back into a pandas dataframe. However, the top 
    priorities of QPD are correctness and consistency. It ensures the results of 
    implemented SQL features following SQL convention, and it ensures consistent 
    behavior regardless of backend computing frameworks. 
  doc_url: https://pypi.org/project/qpd/

extra:
  recipe-maintainers:
    - charlesbluca
    - kvnkho
    - goodwanghan
    - thewchan
